// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.name = 'bomb';

  this.img_src = "./stick_figures/bomb-wick32.png";

  this.num_animations = 1;

  this.num_frames = 5;

  this.canvas_id = 'stickman-canvas';

  this.Stickman = (function(superClass) {
    extend(Stickman, superClass);

    function Stickman(position) {
      this.position = position;
      this.update_score = bind(this.update_score, this);
      this.change_score = bind(this.change_score, this);
      this.toJSON = bind(this.toJSON, this);
      this.enable_bomb = bind(this.enable_bomb, this);
      this.enable_fire = bind(this.enable_fire, this);
      this.creature_collision = bind(this.creature_collision, this);
      this.throw_bomb = bind(this.throw_bomb, this);
      this.throw_fireball = bind(this.throw_fireball, this);
      this.throw_object = bind(this.throw_object, this);
      this.checkCollisions = bind(this.checkCollisions, this);
      this.die = bind(this.die, this);
      this.name = 'stickman';
      this.img_src = "./stick_figures/stickman5.png";
      this.num_frames = 4;
      this.canvas_id = 'stickman-canvas';
      Stickman.__super__.constructor.call(this, this.name, this.position, this.img_src, this.num_frames);
      this.num_animations = 3;
      this.coins_collected = 0;
      this.score = 0;
      this.new_score = 0;
      this.creature_changes_direction = false;
      this.is_moving_left = false;
      this.is_moving_right = false;
      this.player_speed = 7;
      this.jump_speed = 0.0;
      this.jump_force = 7;
      this.terminal_jump_speed = 10;
      this.terminal_velocity = 30;
      this.terminal_upward_velocity = 20;
      this.tiles_visited = {};
      this.fire_frame_counter = 0;
      this.is_on_fire = false;
      this.should_load_tile_animations = true;
    }

    Stickman.prototype.die = function() {
      return 1;
    };

    Stickman.prototype.checkCollisions = function(x, y, world, collision_count) {
      var ref, ref1, ref2, x_norm, x_norm_right, x_rel, y_norm, y_norm_top, y_rel;
      ref = getPositionInTileAbs([x, y], this.tilesize), x_rel = ref[0], y_rel = ref[1];
      if (collision_count > world.MAX_COLLISION_COUNT) {
        return this.old_position;
      }
      ref1 = [x_rel / this.tilesize, y_rel / this.tilesize], x_norm = ref1[0], y_norm = ref1[1];
      ref2 = [(x_rel + this.frame_width) / this.tilesize, (y_rel - 32) / this.tilesize], x_norm_right = ref2[0], y_norm_top = ref2[1];
      if (getImagePixelNormCoords(this.image_data, x_norm, y_norm, false) === 0) {
        this.fall_speed = 0;
        this.is_jumping = false;
        this.is_moving_up = false;
        return this.checkCollisions(x, y + 1, world, collision_count + 1, this.tilesize);
      } else if (this.is_jumping && getImagePixelNormCoords(this.image_data, x_norm, y_norm_top, this.bool_empty_space) === 0) {
        return this.checkCollisions(x, y - 1, world, collision_count + 1, this.tilesize);
      } else {
        return [x, y];
      }
    };

    Stickman.prototype.throw_object = function(object) {
      object.player_speed = object.player_speed + this.player_speed * (this.is_moving_left || this.is_moving_right);
      if (stickman.is_facing_right || stickman.is_moving_right) {
        object.direction = -1;
        object.is_moving_right = true;
        object.is_moving_left = false;
      } else {
        object.direction = 1;
        object.is_moving_left = true;
        object.is_moving_right = false;
      }
      return creatures.push(object);
    };

    Stickman.prototype.throw_fireball = function() {
      var fireball, x_offset;
      if (this.has_fire) {
        x_offset = this.is_facing_right && -20 || 20;
        fireball = new Fireball([this.position[0] + x_offset, this.position[1] + 20]);
        this.throw_object(fireball);
        return fireball.die_in(5000);
      }
    };

    Stickman.prototype.throw_bomb = function() {
      var bomb, x_offset;
      if (this.has_bomb) {
        x_offset = this.is_facing_right && -10 || 30;
        bomb = new Bomb([this.position[0] + x_offset, this.position[1] + 20]);
        this.throw_object(bomb);
        return bomb.explode_in(1000);
      }
    };

    Stickman.prototype.creature_collision = function(creature) {
      var bottom, bottom_left, bottom_right, c_bottom, c_left, c_right, c_top, cbottom_left, cbottom_right, collided, ctop_left, ctop_right, left, ref, ref1, ref2, ref3, right, top, top_left, top_right;
      ref = [this.position[0] - this.width, this.position[1] + this.height], left = ref[0], top = ref[1];
      ref1 = [this.position[0], this.position[1]], right = ref1[0], bottom = ref1[1];
      ref2 = [creature.position[0] - creature.width, creature.position[1] + creature.height], c_left = ref2[0], c_top = ref2[1];
      ref3 = [creature.position[0], creature.position[1]], c_right = ref3[0], c_bottom = ref3[1];
      collided = false;
      if (this.point_creature_collision(left, bottom, c_left, c_top, c_right, c_bottom)) {
        bottom_left = true;
        collided = true;
      } else if (this.point_creature_collision(right, bottom, c_left, c_top, c_right, c_bottom)) {
        bottom_right = true;
        collided = true;
      } else if (this.point_creature_collision(c_left, c_bottom, left, top, right, bottom)) {
        cbottom_left = true;
        collided = true;
      } else if (this.point_creature_collision(c_right, c_bottom, left, top, right, bottom)) {
        cbottom_right = true;
        collided = true;
      } else if (this.point_creature_collision(left, top, c_left, c_top, c_right, c_bottom)) {
        top_left = true;
        collided = true;
      } else if (this.point_creature_collision(right, top, c_left, c_top, c_right, c_bottom)) {
        top_right = true;
        collided = true;
      } else if (this.point_creature_collision(c_left, c_top, left, top, right, bottom)) {
        ctop_left = true;
        collided = true;
      } else if (this.point_creature_collision(c_right, c_top, left, top, right, bottom)) {
        ctop_right = true;
        collided = true;
      }
      if (collided && creature.name === 'square') {
        if (top_left || top_right || cbottom_right || cbottom_left) {
          this.position[1] = c_bottom - this.height;
          if (!creature.already_bumped) {
            creature.bump();
          }
        } else if (bottom_right || bottom_left || ctop_left || ctop_right) {
          stickman.is_jumping = false;
          this.position[1] = c_top;
          this.fall_speed = 0.0;
        }
      }
      if (collided && (creature.name === 'pipe' || creature.name === 'cage')) {
        if (top_left || top_right || cbottom_right || cbottom_left) {
          if ((top - c_bottom) < (c_bottom - bottom)) {
            this.position[1] = c_bottom - this.height;
          }
        } else if (bottom_right || bottom_left || ctop_left || ctop_right) {
          if (bottom_right || bottom_left) {
            if ((c_top - bottom) < (top - c_top)) {
              stickman.is_jumping = false;
              if (stickman.is_moving_down) {
                this.position = creature.teleport_position;
              } else {
                this.position[1] = c_top;
                this.fall_speed = 0.0;
              }
            }
          } else {
            stickman.is_jumping = false;
            if (stickman.is_moving_down) {
              this.position = creature.teleport_position;
            } else {
              this.position[1] = c_top;
              this.fall_speed = 0.0;
            }
          }
        }
      }
      if (collided && creature.name === 'coin') {
        setTimeout(creature.die, 1);
        this.coins_collected += 1;
        $('#coins-collected').text(this.coins_collected);
      }
      if (collided && creature.name === 'flower') {
        setTimeout(creature.die, 1);
        this.enable_fire();
      }
      if (collided && creature.name === 'fireball') {
        this.is_on_fire = true;
        creature.play_sound(creature.burn_sound);
        this.change_score(-50);
        setTimeout(creature.die, 1);
        setTimeout(((function(_this) {
          return function() {
            return _this.is_on_fire = false;
          };
        })(this)), 1000);
      }
      if (collided && creature.name === 'plant') {
        if (bottom_right || bottom_left || ctop_left || ctop_right) {
          this.change_score(-50);
          stickman.jump();
        }
      }
      if (collided && creature.name === 'bomb' && creature.is_dud === true) {
        setTimeout(creature.die, 1);
        this.enable_bomb();
      }
      if (collided && creature.name === 'mushroom_man') {
        if (top_left || top_right || cbottom_right || cbottom_left) {
          this.change_score(-200);
          this.position[1] = c_top + 10;
          this.fall_speed = -10.0;
        } else if (bottom_right || bottom_left || ctop_left || ctop_right) {
          stickman.is_jumping = true;
          this.position[1] = c_top + 10;
          creature.is_squashed = true;
          creature.play_sound(creature.squished_sound);
          this.fall_speed = -10.0;
          setTimeout(creature.die, 500);
          this.change_score(100);
        }
      }
      if (collided && creature.name === 'turtle') {
        if (top_left || top_right || cbottom_right || cbottom_left) {
          this.die();
        } else if (bottom_right || bottom_left || ctop_left || ctop_right) {
          stickman.is_jumping = true;
          this.position[1] = c_top + 10;
          this.fall_speed = -10.0;
          creature.is_squashed = true;
        }
      }
      if (collided && creature.name === 'plant') {
        this.die();
      }
      if (collided && creature.name === 'fireball') {
        return this.die();
      }
    };

    Stickman.prototype.update_position = function(world) {
      var tilename;
      Stickman.__super__.update_position.call(this, world);
      this.update_score();
      if (this.should_load_tile_animations) {
        tilename = tile_name2(this.cur_x_tile, this.cur_y_tile);
        this.current_animation = tile_animations[tilename];
      }
      if (this.current_animation && !this.current_animation.triggered) {
        if (distance_between_points(stickman.position, this.current_animation.trigger_position) < 200) {
          console.info("triggering animation");
          this.current_animation.triggered = true;
          return this.current_animation.animate();
        }
      }
    };

    Stickman.prototype.enable_fire = function() {
      $("#button-action").css("color", "Tomato");
      return this.has_fire = true;
    };

    Stickman.prototype.enable_bomb = function() {
      $("#button-bomb").css("color", "Tomato");
      return this.has_bomb = true;
    };

    Stickman.prototype.toJSON = function() {
      var creature_json, stickman_json;
      creature_json = Stickman.__super__.toJSON.apply(this, arguments);
      stickman_json = {
        score: this.score,
        has_fire: this.has_fire,
        has_bomb: this.has_bomb,
        coins_collected: this.coins_collected
      };
      return Object.assign({}, creature_json, stickman_json);
    };

    Stickman.prototype.change_score = function(amount) {
      return this.new_score = this.new_score + amount;
    };

    Stickman.prototype.update_score = function() {
      if (this.new_score > this.score) {
        this.score += 1;
        $('#score').text(this.score);
        $('#score').css('color', 'green');
        if (this.new_score === this.score) {
          return $('#score').css('color', '#333');
        }
      } else if (this.new_score < this.score) {
        this.score -= 1;
        $('#score').text(this.score);
        $('#score').css('color', 'red');
        if (this.new_score === this.score) {
          return $('#score').css('color', '#333');
        }
      }
    };

    return Stickman;

  })(this.Creature);

}).call(this);
