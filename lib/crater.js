// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Crater = (function(superClass) {
    extend(Crater, superClass);

    function Crater(position, blast_radius, offset_by_blast_radius) {
      this.position = position;
      this.blast_radius = blast_radius;
      this.offset_by_blast_radius = offset_by_blast_radius != null ? offset_by_blast_radius : true;
      this.draw = bind(this.draw, this);
      this.name = 'crater';
      this.img_src = "./stick_figures/crater.png";
      this.num_animations = 1;
      this.num_frames = 1;
      Crater.__super__.constructor.call(this, this.name, this.position, this.img_src, this.num_frames);
      this.creature_changes_direction = false;
      this.gravity_factor = 0.0;
      this.terminal_velocity = 20;
      this.player_speed = 0;
      this.rotation_angle = Math.random() * 360;
      this.img = $('<img src=' + this.img_src + ' style="top:0px;left:0px;" z-index: -1; position: absolute;" style="display:none" />');
      this.image = this.img[0];
      this.image.onload = (function(_this) {
        return function() {
          _this.frame_width = Math.floor(_this.image.width / (_this.num_frames * _this.num_animations));
          _this.frame_height = _this.image.height;
          _this.height = _this.image.height;
          _this.width = _this.frame_width;
          if (_this.offset_by_blast_radius) {
            return _this.position = [_this.position[0] + _this.width / 2, _this.position[1] - _this.height / 2];
          }
        };
      })(this);
    }

    Crater.prototype.draw = function() {
      var flipAxis;
      this.frame_index = 0;
      flipAxis = [this.relative_position[0] + this.frame_width / 2, this.relative_position[1] - this.frame_height / 2];
      this.context.translate(flipAxis[0], flipAxis[1]);
      this.context.rotate(this.rotation_angle);
      this.context.translate(-flipAxis[0], -flipAxis[1]);
      return this.context.drawImage(this.image, this.frame_width * this.frame_index, 0, this.frame_width, this.image.height, this.relative_position[0], this.relative_position[1] - this.image.height, this.frame_width, this.image.height);
    };

    return Crater;

  })(this.Creature);

}).call(this);
