// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Pipe = (function(superClass) {
    extend(Pipe, superClass);

    function Pipe(position, teleport_position) {
      var callback, tilenumber;
      this.position = position;
      this.teleport_position = teleport_position;
      this.place_in_tile = bind(this.place_in_tile, this);
      this.name = "pipe";
      this.img_src = "./stick_figures/pipe.png";
      this.num_frames = 1;
      Pipe.__super__.constructor.call(this, this.name, this.position, this.img_src, this.num_frames);
      tilenumber = tile_number_abs(this.position, this.tilesize);
      this.player_speed = 0;
      callback = (function(_this) {
        return function() {
          return setTimeout(_this.place_in_tile, 500);
        };
      })(this);
      this.load_image(callback, tilenumber[0], tilenumber[1]);
      this.creature_changes_direction = false;
    }

    Pipe.prototype.place_in_tile = function() {
      var canvas, context, data, i, image_data, image_hash, new_data, ref, ref1, ref2, results, tilename, tilenumber, x_norm, x_reduced, x_rel, y_norm, y_reduced, y_rel;
      tilenumber = tile_number_abs(this.position, this.tilesize);
      tilename = tile_name2(tilenumber[0], tilenumber[1]);
      image_hash = world.images[tilename];
      if (image_hash && image_hash.canvas) {
        ref = getPositionInTileAbs(this.position, this.tilesize, tilenumber), x_rel = ref[0], y_rel = ref[1];
        ref1 = [x_rel / this.tilesize, y_rel / this.tilesize], x_norm = ref1[0], y_norm = ref1[1];
        canvas = image_hash.canvas;
        ref2 = [x_norm * canvas.width, y_norm * canvas.height], x_reduced = ref2[0], y_reduced = ref2[1];
        context = canvas.getContext("2d");
        context.resetTransform();
        context.beginPath();
        context.rect(x_reduced, y_reduced, canvas.width * this.frame_width / this.tilesize, -0.9 * canvas.height * this.frame_height / this.tilesize);
        context.fillStyle = 'red';
        context.fill();
        image_data = context.getImageData(0, 0, canvas.width, canvas.height);
        new_data = image_data.data;
        data = world.images[image_hash.name].image_data.data;
        i = 0;
        results = [];
        while (i < data.length) {
          data[i] = new_data[i];
          data[i + 1] = new_data[i + 1];
          data[i + 2] = new_data[i + 2];
          results.push(i += 4);
        }
        return results;
      } else {
        return console.info("image_hash not ready");
      }
    };

    Pipe.prototype.creature_changes_direction = false;

    return Pipe;

  })(this.Creature);

}).call(this);
