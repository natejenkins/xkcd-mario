// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Bomb = (function(superClass) {
    extend(Bomb, superClass);

    function Bomb(position, is_dud) {
      this.position = position;
      this.is_dud = is_dud != null ? is_dud : false;
      this.draw_exploded = bind(this.draw_exploded, this);
      this.draw_rotating = bind(this.draw_rotating, this);
      this.draw = bind(this.draw, this);
      this.explode_in = bind(this.explode_in, this);
      this.is_in_blast_radius = bind(this.is_in_blast_radius, this);
      this.explode = bind(this.explode, this);
      this.explode_in_tilenumber = bind(this.explode_in_tilenumber, this);
      this.name = 'bomb';
      this.img_src = "./stick_figures/bomb-wick32.png";
      this.num_animations = 1;
      this.num_frames = 5;
      Bomb.__super__.constructor.call(this, this.name, this.position, this.img_src, this.num_frames);
      this.frame_factor = 15;
      this.is_squashed = false;
      this.always_animate = true;
      this.stop_animate_on_last_frame = true;
      this.blast_radius = 150;
      this.creature_changes_direction = false;
      this.gravity_factor = 0.1;
      this.terminal_velocity = 20;
      this.player_speed = 0;
      this.has_friction = true;
      this.friction_factor = 0.9;
      this.is_exploding = false;
      if (this.is_dud) {
        this.stop_animate_on_last_frame = true;
      }
      this.play_sound(this.throw_sound);
    }

    Bomb.prototype.throw_sound = new Howl({
      src: ['sounds/throw_bomb.mp3'],
      volume: 0.5,
      html5: true
    });

    Bomb.prototype.explode_in_tilenumber = function(tilenumber) {
      var canvas, context, data, i, image_data, image_hash, new_data, ref, ref1, ref2, results, tilename, x_norm, x_reduced, x_rel, y_norm, y_reduced, y_rel;
      tilename = tile_name2(tilenumber[0], tilenumber[1]);
      image_hash = world.images[tilename];
      if (image_hash && image_hash.canvas) {
        ref = getPositionInTileAbs(this.position, this.tilesize, tilenumber), x_rel = ref[0], y_rel = ref[1];
        ref1 = [x_rel / this.tilesize, y_rel / this.tilesize], x_norm = ref1[0], y_norm = ref1[1];
        canvas = image_hash.canvas;
        ref2 = [x_norm * canvas.width, y_norm * canvas.height], x_reduced = ref2[0], y_reduced = ref2[1];
        context = canvas.getContext("2d");
        context.resetTransform();
        context.beginPath();
        context.arc(x_reduced, y_reduced, canvas.width * this.blast_radius / this.tilesize, 0, 2 * Math.PI);
        context.fillStyle = 'white';
        context.fill();
        image_data = context.getImageData(0, 0, canvas.width, canvas.height);
        new_data = image_data.data;
        data = world.images[image_hash.name].image_data.data;
        i = 0;
        results = [];
        while (i < data.length) {
          data[i] = new_data[i];
          data[i + 1] = new_data[i + 1];
          data[i + 2] = new_data[i + 2];
          results.push(i += 4);
        }
        return results;
      }
    };

    Bomb.prototype.explode = function(silently, shake) {
      var bottom_tilenumber, crater, explosion, index, left_tilenumber, right_tilenumber, tilenumber, top_tilenumber;
      if (silently == null) {
        silently = false;
      }
      if (shake == null) {
        shake = true;
      }
      this.has_exploded = true;
      this.player_speed = 0;
      this.gravity_factor = 0;
      this.fall_speed = 0;
      index = creatures.indexOf(this);
      if (index >= 0) {
        creatures.splice(index, 1);
        creatures.unshift(this);
      }
      tilenumber = tile_number_abs(this.position, this.tilesize);
      left_tilenumber = tile_number_abs([this.position[0] + this.blast_radius, this.position[1]], this.tilesize);
      right_tilenumber = tile_number_abs([this.position[0] - this.blast_radius, this.position[1]], this.tilesize);
      top_tilenumber = tile_number_abs([this.position[0], this.position[1] + this.blast_radius], this.tilesize);
      bottom_tilenumber = tile_number_abs([this.position[0], this.position[1] - this.blast_radius], this.tilesize);
      this.explode_in_tilenumber(tilenumber);
      if (!silently) {
        explosion = new Explosion([this.position[0] + 100, this.position[1] - 100], this.blast_radius);
        window.creatures.push(explosion);
        crater = new Crater(this.position, this.blast_radius);
        window.creatures.unshift(crater);
        if (shake) {
          world.shake(explosion.kill_victims);
        } else {
          setTimeout(explosion.kill_victims, 100);
        }
      }
      if (left_tilenumber[0] !== tilenumber[0]) {
        this.explode_in_tilenumber(left_tilenumber);
      }
      if (right_tilenumber[0] !== tilenumber[0]) {
        this.explode_in_tilenumber(right_tilenumber);
      }
      if (top_tilenumber[1] !== tilenumber[1]) {
        this.explode_in_tilenumber(top_tilenumber);
      }
      if (bottom_tilenumber[1] !== tilenumber[1]) {
        return this.explode_in_tilenumber(bottom_tilenumber);
      }
    };

    Bomb.prototype.is_in_blast_radius = function(creature) {
      var b_bottom, b_left, b_right, b_top, b_x_middle, b_y_middle, blast_vector, bottom, center_x, center_y, inside_radius, left, ref, ref1, ref2, ref3, ref4, ref5, right, top;
      inside_radius = false;
      ref = [creature.position[0] - creature.width, creature.position[1] + creature.height], left = ref[0], top = ref[1];
      ref1 = [creature.position[0], creature.position[1]], right = ref1[0], bottom = ref1[1];
      ref2 = [this.position[0] - this.width, this.position[1] + this.height], b_left = ref2[0], b_top = ref2[1];
      ref3 = [this.position[0], this.position[1]], b_right = ref3[0], b_bottom = ref3[1];
      ref4 = [b_left + (b_right - b_left) / 2, b_bottom + (b_top - b_bottom) / 2], b_x_middle = ref4[0], b_y_middle = ref4[1];
      ref5 = [left + (right - left) / 2, bottom + (top - bottom) / 2], center_x = ref5[0], center_y = ref5[1];
      blast_vector = [center_x - b_x_middle, center_y - b_y_middle];
      if (Math.hypot(blast_vector[0], blast_vector[1]) < this.blast_radius) {
        inside_radius = true;
      }
      return inside_radius;
    };

    Bomb.prototype.explode_in = function(milliseconds) {
      return setTimeout(this.explode, milliseconds);
    };

    Bomb.prototype.has_collided = false;

    Bomb.prototype.draw = function() {
      if (!this.has_exploded) {
        return this.draw_rotating();
      }
    };

    Bomb.prototype.draw_rotating = function() {
      var flipAxis;
      if (this.is_moving_right || this.is_moving_left || this.is_jumping || this.is_trying_to_jump || this.always_animate) {
        this.frame_counter++;
      }
      if (this.stop_animate_on_last_frame && (this.frame_index === this.num_frames - 1)) {

      } else {
        this.frame_index = Math.floor(this.frame_counter / this.frame_factor) % this.num_frames;
      }
      if (this.direction > 0 && this.player_speed !== 0) {
        flipAxis = [this.relative_position[0] + this.frame_width / 2, this.relative_position[1] - this.frame_height / 2];
        this.context.translate(flipAxis[0], flipAxis[1]);
        this.context.rotate(-0.1 * this.player_speed * this.frame_counter);
        this.context.translate(-flipAxis[0], -flipAxis[1]);
      } else if (this.direction < 0 && this.player_speed !== 0) {
        flipAxis = [this.relative_position[0] + this.frame_width / 2, this.relative_position[1] - this.frame_height / 2];
        this.context.translate(flipAxis[0], flipAxis[1]);
        this.context.rotate(0.1 * this.player_speed * this.frame_counter);
        this.context.translate(-flipAxis[0], -flipAxis[1]);
      }
      return this.context.drawImage(this.image, this.frame_width * this.frame_index, 0, this.frame_width, this.image.height, this.relative_position[0], this.relative_position[1] - this.image.height, this.frame_width, this.image.height);
    };

    Bomb.prototype.draw_exploded = function() {
      this.context.beginPath();
      this.context.arc(this.relative_position[0], this.relative_position[1], this.blast_radius, 0, 2 * Math.PI);
      this.context.fillStyle = 'white';
      return this.context.fill();
    };

    return Bomb;

  })(this.Creature);

}).call(this);
