// Generated by CoffeeScript 1.9.3
(function() {
  var Map, c, original_tilesize, screen_height, screen_width, stickman, tilesize, world;

  this.getImagePixelNormCoords = function(imageData, x, y, is_empty_space) {
    var blueComponent;
    if (is_empty_space == null) {
      is_empty_space = false;
    }
    if (is_empty_space) {
      return 255;
    }
    if (imageData === void 0) {
      return 255;
    }
    blueComponent = imageData.data[Math.floor(y * imageData.height) * imageData.width * 4 + Math.floor(x * imageData.width) * 4 + 2];
    return blueComponent;
  };

  this.getPositionInTileAbs = function(player_position, tilesize, tilenumber) {
    var rel, x_abs, y_abs, zero;
    if (tilenumber == null) {
      tilenumber = void 0;
    }
    x_abs = player_position[0];
    y_abs = player_position[1];
    if (tilenumber) {
      zero = tilenumber;
    } else {
      zero = [Math.floor(-x_abs / tilesize), Math.floor(-y_abs / tilesize)];
    }
    return rel = [Math.floor(((-x_abs) / tilesize - zero[0]) * tilesize), Math.floor(((-y_abs) / tilesize - zero[1]) * tilesize)];
  };

  this.tile_name2 = function(x, y, size) {
    var x_part, y_part;
    if (size == null) {
      size = [14, 48, 25, 33];
    }
    x -= size[3];
    y -= size[0];
    if (y >= 0) {
      y_part = (y + 1) + 's';
    } else {
      y_part = -y + 'n';
    }
    if (x >= 0) {
      x_part = (x + 1) + 'e';
    } else {
      x_part = -x + 'w';
    }
    return y_part + x_part;
  };

  this.tile_number_abs = function(player_position, tilesize) {
    var x_abs, y_abs;
    x_abs = player_position[0];
    y_abs = player_position[1];
    return [Math.floor(-x_abs / tilesize), Math.floor(-y_abs / tilesize)];
  };

  this.distance_between_points = function(p1, p2) {
    return Math.pow(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2), 0.5);
  };

  this.updateWorld = function() {
    var creature, j, k, len, len1, other_creature;
    if (!world.paused) {
      window.stickman.update_position(world);
      window.stickman.context.clearRect(0, 0, window.stickman.canvas.width, window.stickman.canvas.height);
      world.keep_stickman_in_view(window.stickman.position, screen_width, screen_height);
      world.load_current_scene();
      world.draw();
      for (j = 0, len = creatures.length; j < len; j++) {
        creature = creatures[j];
        if (!creature) {
          continue;
        }
        creature.calc_relative_position(world.position);
        if (creature.relative_position[0] > -2 * world.canvas_width && creature.relative_position[0] < 3 * world.canvas_width && creature.relative_position[1] > -2 * world.canvas_height && creature.relative_position[1] < 3 * world.canvas_height) {
          creature.context.setTransform(1, 0, 0, 1, 0, 0);
          creature.update_position(world);
          creature.draw();
          window.stickman.creature_collision(creature);
          if (creature.name === 'fireball') {
            for (k = 0, len1 = creatures.length; k < len1; k++) {
              other_creature = creatures[k];
              if (other_creature && (other_creature.name === 'mushroom_man' || other_creature.name === 'bowser' || other_creature.name === 'plant')) {
                creature.creature_collision(other_creature);
              }
            }
          }
        }
      }
      window.stickman.context.setTransform(1, 0, 0, 1, 0, 0);
      window.stickman.draw();
      return requestAnimationFrame(updateWorld);
    }
  };

  c = 1;

  original_tilesize = 1;

  stickman = 1;

  tilesize = 1;

  world = 1;

  screen_width = 0;

  screen_height = 0;

  $(window).resize((function(_this) {
    return function() {
      var $container, canvas;
      $container = $("#comic");
      screen_width = $container.width();
      screen_height = $container.height();
      canvas = $container.find('canvas')[0];
      canvas.width = screen_width;
      canvas.height = screen_height;
      world && (world.canvas_width = canvas.width);
      return world && (world.canvas_height = canvas.height);
    };
  })(this));

  Map = function($container) {
    this.init = function() {
      var b, cage, canvas, creatures, flower_square, i, j, k, l, len, len1, len2, len3, m, map_size, normalized_position, p, pipe, pipe_position, pipe_teleport_position, pipes, plant, position, princess, princess_coords, ref, ref1, ref2, ref3, scale, size, squares, total_coins, zoom;
      history.pushState(null, null, location.href);
      window.onpopstate = function() {
        history.go(1);
      };
      size = [14, 48, 25, 33];
      zoom = 3.0;
      original_tilesize = 2048;
      tilesize = Math.floor(original_tilesize * zoom);
      screen_width = $container.width();
      screen_height = $container.height();
      canvas = $container.find('canvas')[0];
      canvas.width = screen_width;
      canvas.height = screen_height;
      map_size = [(size[1] + size[3]) * tilesize, (size[0] + size[2]) * tilesize];
      scale = 0.25;
      normalized_position = [-0.4815, -0.346];
      world = new World(normalized_position, map_size);
      world.original_tilesize = original_tilesize;
      world.scale = scale;
      world.tilesize = tilesize;
      world.borders = false;
      world.sound = true;
      world.canvas_width = canvas.width;
      world.canvas_height = canvas.height;
      world.sound_on = true;
      window.world = world;
      world.load_current_scene();
      stickman = new Stickman(world.unnormalized_map_coords(normalized_position));
      b = new Bowser(world.unnormalized_map_coords(initial_game_state.bowser.position));
      pipe_position = world.unnormalized_map_coords([-0.482, -0.3473]);
      pipe_teleport_position = world.unnormalized_map_coords([-0.5812530462319959, -0.342]);
      pipe = new Pipe(pipe_position, [-289673.716, -82115.0192 + 300]);
      plant = new Plant(world.unnormalized_map_coords([-0.48203, -0.3472]));
      princess_coords = [-244521.216, -83195];
      princess = new Princess(princess_coords);
      cage = new Cage(world.unnormalized_map_coords([-0.4911759420010288, -0.3467950253739316]));
      flower_square = new Square(world.unnormalized_map_coords([-0.4830206725823045, -0.3468883547008547]), 'flower');
      creatures = [];
      squares = [];
      creatures = [b, plant, pipe, princess, cage, flower_square];
      ref = initial_game_state.square_positions;
      for (j = 0, len = ref.length; j < len; j++) {
        position = ref[j];
        creatures.push(new Square(world.unnormalized_map_coords(position)));
      }
      pipes = [pipe];
      ref1 = initial_game_state.pipe_positions;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        position = ref1[k];
        i = i + 1;
        p = new Pipe(world.unnormalized_map_coords(position[0]), world.unnormalized_map_coords(position[1]));
        creatures.push(p);
        pipes.push(p);
      }
      ref2 = initial_game_state.coin_positions;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        position = ref2[l];
        creatures.push(new Coin(world.unnormalized_map_coords(position), true));
      }
      ref3 = initial_game_state.mushroom_men_positions;
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        position = ref3[m];
        creatures.push(new MushroomMan(world.unnormalized_map_coords(position)));
      }
      total_coins = initial_game_state.square_positions.length + initial_game_state.coin_positions.length;
      $('#total-coins').text(total_coins);
      window.creatures = creatures;
      window.squares = squares;
      window.stickman = stickman;
      window.fire = new Fire([0, 0]);
      window.bowser = b;
      window.pipes = pipes;
      window.world = world;
      window.cage = cage;
      window.princess = princess;
      return stickman.load_image(function() {
        requestAnimationFrame(updateWorld);
        return world.pause();
      });
    };
    return this;
  };

  $(function() {
    var map;
    map = new Map($("#comic"));
    return map.init();
  });

}).call(this);
