// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Bowser = (function(superClass) {
    extend(Bowser, superClass);

    function Bowser(position) {
      var next_fireball;
      this.position = position;
      this.die = bind(this.die, this);
      this.attack_loop = bind(this.attack_loop, this);
      this.dive_bomb = bind(this.dive_bomb, this);
      this.air_attack = bind(this.air_attack, this);
      this.throw_fireburst = bind(this.throw_fireburst, this);
      this.throw_fireball = bind(this.throw_fireball, this);
      this.name = "bowser";
      this.img_src = "./stick_figures/bowser.png";
      this.num_frames = 121;
      Bowser.__super__.constructor.call(this, this.name, this.position, this.img_src, this.num_frames);
      this.num_animations = 2;
      this.frame_factor = 1;
      this.is_squashed = false;
      next_fireball = 1000;
      this.is_moving_left = false;
      this.is_moving_right = false;
      this.creature_changes_direction = false;
      this.fireball_fall_speed = -10;
      this.fireball_player_speed = 5;
      this.fireball_gravity_factor = 0.5;
      this.is_invicible = true;
      this.jump_speed = 0.0;
      this.jump_force = 7;
      this.terminal_jump_speed = 10;
      this.terminal_velocity = 30;
      this.terminal_upward_velocity = 20;
      this.energy = 10;
    }

    Bowser.prototype.throw_fireball = function() {
      var fireball, next_fireball;
      fireball = new Fireball([this.position[0], this.position[1] + 20]);
      fireball.fall_speed = this.fireball_fall_speed;
      fireball.player_speed = this.fireball_player_speed;
      fireball.direction = this.direction;
      fireball.gravity_factor = this.fireball_gravity_factor;
      fireball.die_in(10000);
      creatures.push(fireball);
      next_fireball = Math.random() * 10000;
      return setTimeout(this.throw_fireball, next_fireball);
    };

    Bowser.prototype.throw_fireburst = function() {
      var fireball, fireballs, i, num_fireballs, x_offset;
      num_fireballs = 10;
      fireballs = [];
      i = 0;
      x_offset = (this.direction === 1) && 40 || -100;
      while (i < 10) {
        fireball = new Fireball([this.position[0] + x_offset, this.position[1] + 20]);
        fireball.fall_speed = this.fireball_fall_speed + i * Math.random();
        fireball.player_speed = this.fireball_player_speed + i;
        if (this.is_moving_right) {
          fireball.direction = -1;
          fireball.is_moving_right = true;
          fireball.is_moving_left = false;
        } else {
          fireball.direction = 1;
          fireball.is_moving_left = true;
          fireball.is_moving_right = false;
        }
        fireball.gravity_factor = this.fireball_gravity_factor;
        fireball.die_in(2000);
        fireballs.push(fireball);
        i += 1;
      }
      window.creatures = window.creatures.concat(fireballs);
      if (this.attack_loop_enabled) {
        return setTimeout(this.attack_loop, 1000);
      }
    };

    Bowser.prototype.air_attack = function() {
      var d;
      d = this.position[0] - stickman.position[0];
      if (d > 0) {
        this.set_direction('right');
      } else {
        this.set_direction('left');
      }
      this.player_speed = 20 * (Math.abs(d)) / 600;
      this.gravity_factor = 0.5;
      this.jump();
      return setTimeout(this.dive_bomb, 500);
    };

    Bowser.prototype.dive_bomb = function() {
      this.gravity_factor = 10;
      this.player_speed = 0;
      return this.collision_callback = (function(_this) {
        return function() {
          var explosion;
          explosion = new Explosion([_this.position[0] + 100, _this.position[1] - 100], 150);
          explosion.dont_kill_owner = true;
          explosion.owner = _this;
          window.creatures.push(explosion);
          world.shake(explosion.kill_victims);
          if (_this.position[0] > stickman.position[0]) {
            _this.set_direction('right');
          } else {
            _this.set_direction('left');
          }
          _this.player_speed = 1;
          if (_this.attack_loop_enabled) {
            return setTimeout(_this.attack_loop, 1000);
          }
        };
      })(this);
    };

    Bowser.prototype.attack_loop = function() {
      var attack, time;
      this.attack_loop_enabled = true;
      if (Math.random() > 0.5) {
        attack = this.air_attack;
      } else {
        attack = this.throw_fireburst;
      }
      time = Math.random() * 2000;
      return setTimeout(attack, time);
    };

    Bowser.prototype.die = function() {
      this.attack_loop_enabled = false;
      this.is_dead = true;
      Bowser.__super__.die.apply(this, arguments);
      return world.end_scene();
    };

    return Bowser;

  })(this.Creature);

}).call(this);
